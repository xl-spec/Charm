// could make this inherit artifact, or make entire level class? idk
class Level {
  constructor(x = LEVEL_WIDTH, y = LEVEL_HEIGHT, z = LEVEL_DEPTH) {
    this.size = { x, y, z };
  }

  draw() {
    push();
    translate(0, 0, 0); // Center the level at the origin
    noFill();
    stroke(255); // Outline color
    box(this.size.x, this.size.y, this.size.z);
    pop();
  }
}


class MouseHandler {
  constructor(camera) {
    this.dragStart = null;
    this.angleX = 0; // Horizontal rotation angle
    this.angleY = -60.4; // Vertical rotation angle
    this.zoomLevel = 20; // Initial zoom level
    // this.angleX = 20;
    // this.angleY = -60;
    // this.zoomLevel = 400;
    // this.angleX = 9;
    // this.angleY = -60;
    // this.zoomLevel = 400;
    // this.camera = camera; maybe add later idk
  }

  mousePressed() {
    // Track the initial mouse position on press
    this.dragStart = { x: mouseX, y: mouseY };
  }

  mouseDragged() {
    if (this.dragStart) {
      // Calculate the difference between the current and initial mouse positions
      let deltaX = mouseX - this.dragStart.x;
      let deltaY = mouseY - this.dragStart.y;

      // Adjust angles based on mouse movement
      this.angleX -= deltaX * 0.01; // Horizontal rotation
      this.angleY -= deltaY * 0.01; // Vertical rotation

      // Update dragStart to the current position for smooth dragging
      this.dragStart = { x: mouseX, y: mouseY };
    }
  }

  mouseReleased() {
    this.dragStart = null;
  }

  mouseWheel(event) {
    this.zoomLevel += event.delta * 2;
  }

  applyRotation() {
    rotateX(this.angleY);
    rotateY(this.angleX);
  }
}



var PLAYER_START_X = 0;
var PLAYER_START_Y = 0;
var PLAYER_START_Z = 0;
var PLAYER_START_SIZE = 32;
var PLAYER_START_COLOR = 0;
var PLAYER_START_NAME = 0;

var AXE_SIZE = 4;

var LEVEL_WIDTH = 4096;
var LEVEL_HEIGHT = 128;
var LEVEL_DEPTH = 4096;

var START_Y = 32;



let level; // Level object
let guiCanvas; // GUI canvas for 2D overlay
let mouseHandler; // MouseHandler object
let keyHandler; // KeyHandler object
let entities = []; // Array of sprites
let player1; // Controllable sprite

function setup() {
  noStroke();
  createCanvas(windowWidth, windowHeight, WEBGL);

  // gui
  guiCanvas = createGraphics(windowWidth, windowHeight);

  // input handlers
  mouseHandler = new MouseHandler();
  keyHandler = new KeyHandler();
  collider = new Collider();

  // Initialize level
  level = new Level();

  player1 = new Player();

  for (let i = 0; i < 20; i++) {
    entities.push(
      new Lamp(),
      new Tree(),
      new Snowman(),
      new Snowmound()
    );
  }
}

function draw() {
  clear();
  background(50);

  ambientLight(100);
  // pointLight(255, 255, 255, 0, 0, 300);

  push();

  translate(0, 0, mouseHandler.zoomLevel);
  mouseHandler.applyRotation();
  // orbitControl(3, 3, 3);

  level.draw();
  player1.draw();
  player1.axe.update();

  for (let entity of entities) {
    entity.draw();
    entity.update?.(player1);
    collider.handleCollisions(player1, entity);
  }

  pop();

  handleMovement();
  handleAction();

  drawUI();
  image(guiCanvas, -width / 2, -height / 2); // Position GUI layer
}

function drawUI() {
  let yOffset = 35;
  guiCanvas.clear();
  guiCanvas.fill(100, 170, 200);
  guiCanvas.textSize(12);

  // Display FPS
  guiCanvas.text(`FPS: ${Math.floor(frameRate())}`, 10, 20);

  // Display positions of entities
  guiCanvas.text(
    `${player1.name}: x: ${Math.floor(player1.x)}, z: ${Math.floor(player1.z)}`,
    10,
    yOffset
  );
  yOffset += 15; // Move down for the next entity
  for (let entity of entities) {
    guiCanvas.text(
      `${entity.name}: x: ${Math.floor(entity.x)}, z: ${Math.floor(entity.z)}`,
      10,
      yOffset
    );
    yOffset += 15;
  }
}

function handleMovement() {
  const movement = keyHandler.getMovement();
  const speed = 10;
  player1.moveWithDirection(movement, speed);
}

function handleAction() {
  if (keyHandler.getAction()) {
    player1.axe.startAttack();
  }
}

function keyPressed() {
  keyHandler.handleKeyPressed(key);
}

function keyReleased() {
  keyHandler.handleKeyReleased(key);
}

function mousePressed() {
  mouseHandler.mousePressed();
}

function mouseDragged() {
  mouseHandler.mouseDragged();
}

function mouseReleased() {
  mouseHandler.mouseReleased();
}

function mouseWheel(event) {
  mouseHandler.mouseWheel(event);
}


class Artifact extends Essence {
  constructor(x, y, z, size, color, name) {
    super(x, y, z, size, color, name);
    this.is_alive = false;
  }
}

class Snowmound extends Artifact {
  constructor(x, y, z, size, color, name) {
    super(x, y, z, size, color, name);
    this.x = random(-LEVEL_WIDTH / 12, LEVEL_WIDTH / 12);
    this.y = 0;
    this.z = random(-LEVEL_WIDTH / 12, LEVEL_WIDTH / 12);
    this.size = 48;
    this.color = [139, 69, 19, 255];
    this.name = "Snowmound";
    let snow_clumps = 8; // adjustable amount, maybe in settings? maybe set a max then randomize
  }

  draw() {
    super.draw();
    push();
    translate(this.x, this.y - 16, this.z);
    fill(255);
    noStroke();
    ellipsoid(this.size / 2, this.size / 6);
    pop();
  }
}
class Lamp extends Essence {
  constructor(x, y, z, size, color, name) {
    super(x, y, z, size, color, name);
    this.x = random(-LEVEL_WIDTH / 12, LEVEL_WIDTH / 12);
    this.y = 16;
    this.z = random(-LEVEL_WIDTH / 12, LEVEL_WIDTH / 12);
    this.size = 8;
    this.color = [139, 69, 19, 255];
    this.name = "Lamp";
    this.lit = false;
  }

  draw() {
    super.draw();
    push();
    {
      translate(this.x, this.y, this.z);
      fill(20, 100, 255);
      box(this.size / 2, this.size * 8, this.size / 2);
    }
    pop();

    push();
    {
        translate(this.x, this.y + this.size*4, this.z);
        noStroke();
        fill(255, 255, 50);
        sphere(this.size);
        pointLight(255, 255, 255, this.x, this.y + this.size*4, this.z);
    }
    pop();
  }
}

class Moon extends Essence {}
class Star extends Essence {}


class Creature extends Essence {
  constructor(x, y, z, size, color, name) {
    super(x, y, z, size, color, name);
  }

  move(dx, dy, dz) {
    this.x += dx;
    this.z -= dz;
  }
}

class Tree extends Creature {
  constructor(x, y, z, size, color, name) {
    super(x, y, z, size, color, name);
    this.x = random(-LEVEL_WIDTH / 12, LEVEL_WIDTH / 12);
    this.y = 0;
    this.z = random(-LEVEL_WIDTH / 12, LEVEL_WIDTH / 12);
    this.size = 32;
    this.name = "Dead Tree";
  }

  draw() {
    if (this.is_alive){
        super.draw();
        push();
        translate(this.x, this.y, this.z);
    
        // trunk
        fill(139, 69, 19); // Brown
        box(this.size / 4, this.size, this.size / 4);
    
        // branches
        fill(160, 82, 45); // Lighter brown
        translate(0, -this.size / 2, 0);
        rotateZ(PI / 4);
        box(this.size / 8, this.size / 2, this.size / 8);
        rotateZ(-PI / 2);
        box(this.size / 8, this.size / 2, this.size / 8);
    
        // will do more later
        // thinking of doing trunk, 4-8 branches
        pop();
    }
  }
}

class Snowman extends Creature {
  constructor(x, y, z, size, color, name) {
    super(x, y, z, size, color, name);
    this.x = random(-LEVEL_WIDTH / 12, LEVEL_WIDTH / 12);
    this.y = 0;
    this.z = random(-LEVEL_WIDTH / 12, LEVEL_WIDTH / 12);
    this.size = 32;
    this.name = "Snowman";
    this.snowball = new Snowball("snowball", this);
    this.hasFired = false;
    this.fireDelay = 0; // Delay before firing (frames)
  }

  update(player) {
    // Fire at the player if the snowball isn't active, will change this later so that snowman has ai to run over to snowmound to get ammo
    if (!this.snowball.active) {
      this.shootAtPlayer(player);
    }

    this.snowball.update();
  }

  shootAtPlayer(player) {
    this.snowball.startAttack(createVector(player.x, player.y, player.z));
  }

  draw() {
    if (this.is_alive){
        super.draw();
    
        // Snowman body
        push();
        translate(this.x, 28, this.z);
        fill(255);
        sphere(this.size / 5, 64, 8);
        pop();
    
        push();
        translate(this.x, 16, this.z);
        fill(255);
        sphere(this.size / 3, 64, 8);
        pop();
    
        push();
        translate(this.x, 0, this.z);
        fill(255);
        sphere(this.size / 2, 64, 8);
        pop();
    
        push();
        translate(this.x, -16, this.z);
        fill(50);
        noStroke();
        cylinder(this.size, 16);
        pop();
    
        // Draw snowball if active
        this.snowball.draw();
    }
  }
}

class Yeti extends Essence {}

class Pixie extends Essence {}


class Essence {
    constructor(x, y, z, size, color, name) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.size = size;
      this.color = color || [100, 200, 255, 150]; // Default color
      this.name = name || "Essence";
      this.face_direction = [0, 0]; // might need to make this radians/degrees
      this.is_alive = true;
      this.hitbox = new Hitbox(this.x, -65, this.z, this.size);
    }

    draw() {
      // use buildGeometry() maybe later
      this.hitbox.update(this.x, -65, this.z, this.size);
      this.hitbox.draw();
    }
  }

class Player extends Creature {
    constructor(x, y, z, size, color, name) {
      super(x = PLAYER_START_X, y = PLAYER_START_Y, z = PLAYER_START_Z, size = PLAYER_START_SIZE, color, name); // Call the base class constructor
      this.name = "Character";
      this.hitbox_visible = true;
      this.hit_action = false;
      this.axe = new Axe("Wood Axe", this);
    }
  
    moveWithDirection(direction, speed) {
      //////////////////////////
      // lock movement if in action
      let dx = 0, dz = 0;
  
      if (direction.left) dx -= 1;
      if (direction.right) dx += 1;
      if (direction.up) dz -= 1;
      if (direction.down) dz += 1;
  
      const isDiagonal = dx !== 0 && dz !== 0;
      const moveSpeed = isDiagonal ? speed / 1.414 : speed; // good enough
  
      this.move(dx * moveSpeed, 0, dz * moveSpeed);
    }
  
    draw(){
      super.draw();
  
      push();
        translate(this.x, this.y, this.z);
        fill(...this.color);
        stroke(255);
        cone(this.size / 2, this.size);
      pop();
  
      this.axe.draw();
    }
  }
    

class Weapons {
  constructor(name, holder) {
    this.name = name;
    this.holder = holder;
    this.isRanged = false; // maybe need this for melee and ranged weapons later
    this.hitbox = new Hitbox(
      this.holder.x,
      -65,
      this.holder.z,
      this.holder.size
    );
  }
}

class Snowball extends Weapons {
  // 2nd weapon for snowman needed
  constructor(name, holder) {
    super(name, holder);
    this.isAttacking = false;
    this.position = createVector(holder.x, holder.y, holder.z);
    this.velocity = createVector(0, 0, 0);
    // Gravity (downward)
    this.acceleration = createVector(0, -0.02, 0);
    this.active = false;
  }

  startAttack(target) {
    if (!this.active) {
      this.isAttacking = true;
      this.active = true;

      // Calculate displacement
      let dx = target.x - this.position.x;
      let dz = target.z - this.position.z;
      let dy = target.y - this.position.y - 32; // minor displacement, will update later

      // Horizontal distance in the XZ plane
      let horizontalDist = Math.sqrt(dx * dx + dz * dz);

      // 1) Pick a constant horizontal speed
      let horizontalSpeed = 5;

      // 2) Flight time = horizontal distance / horizontal speed
      let t = horizontalDist / horizontalSpeed;

      // If the target is exactly at the same XZ spot, t can be 0
      // Handle that edge case:
      if (t <= 0) {
        this.active = false;
        return;
      }

      // 3) The needed horizontal velocity components
      let vx = dx / t; // so we traverse dx in time t
      let vz = dz / t;

      // 4) Solve vertical velocity so we land at dy after time t under gravity
      //    dy = vy*t + (1/2)*a*t^2  =>  vy = (dy - 0.5*a*t^2) / t
      let a = this.acceleration.y; // This is negative (e.g. -0.02)
      let vy = (dy - 0.5 * a * t * t) / t;

      // 5) Set our initial velocity
      this.velocity.set(vx, vy, vz);
    }
  }

  update() {
    if (!this.active) return;

    this.velocity.add(this.acceleration);
    this.position.add(this.velocity);

    if (this.position.y < -64) {
      //
      this.isAttacking = false;
      this.position = createVector(this.holder.x, this.holder.y, this.holder.z);
      this.active = false;
    }
  }

  draw() {
    if (!this.active) return;

    this.hitbox.update(this.position.x, -65, this.position.z, 4);
    this.hitbox.draw();

    push();
    translate(this.position.x, this.position.y, this.position.z);
    fill(255);
    noStroke();
    sphere(4, 8, 8);
    pop();
  }
}

class Axe extends Weapons {
  constructor(name, holder) {
    super(name, holder);
    this.isAttacking = false;
    this.angle = -0.2;
    this.swingSpeed = 0.1;
    this.maxAngle = QUARTER_PI * 3;
    this.idleAngle = -0.2;
    this.num_hitboxes = 16;
    this.hitbox_map = {};
    this.hitbox_visible = true;
    // this.settings = new Settings(); // this might not be ok but whatever for now
  }

  startAttack() {
    this.isAttacking = true;
  }

  endAttack() {
    this.isAttacking = false;
    this.angle = this.idleAngle;
    this.hitbox_map = {};
  }

  update() {
    if (!this.isAttacking) return;

    // Advance the angle
    this.angle += this.swingSpeed;
    if (this.angle > this.maxAngle) {
      this.endAttack();
    }
  }

  draw() {
    //
    push();
    // initial location (y - 16)
    translate(this.holder.x, -16, this.holder.z);
    rotateX(this.angle);
    let yOffset = 31.4; // maybe make this setting later idk
    let xOffset = 8;
    translate(xOffset, yOffset, 0);
    fill(150);
    stroke(255);
    cylinder(2, 48); // an axe "handle"
    pop();

    // MATTHHSSS
    let radius = 4 / 2;

    let xBottom = this.holder.x + xOffset;
    let zBottom = this.holder.z + (yOffset - 24) * Math.sin(this.angle);

    let xTop = this.holder.x + xOffset;
    let zTop = this.holder.z + (yOffset + 24) * Math.sin(this.angle);

    let zLow = min(zBottom, zTop);
    let zHigh = max(zBottom, zTop);

    let xLow = zBottom < zTop ? xBottom : xTop;
    let xHigh = zBottom < zTop ? xTop : xBottom;
    let stepX = (xHigh - xLow) / (this.num_hitboxes - 1);
    let stepZ = (zHigh - zLow - 2 * radius) / (this.num_hitboxes - 1);

    // console.log("===== DEBUG =====");
    // console.log(`z=${zLow}, z=${zHigh}`);
    // console.log(`stepZ=${stepZ}, radius=${radius}`);

    // this code is just for hitbox of the axe weapon
    for (let i = 0; i < this.num_hitboxes; i++) {
      let zCircle = zLow + radius + i * stepZ;
      let xCircle = xLow + i * stepX;

      this.hitbox_map[i] = { x: xCircle, y: -65, z: zCircle }; // maybe i need y-axis calculated? idk
      if (this.isAttacking) {
        this.hitbox.update(xCircle, -65, zCircle, 4);
        this.hitbox.draw();
      }
    }
  }
}


